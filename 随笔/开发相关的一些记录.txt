栈帧：当前线程调用的某个方法的执行环境，包含了这个函数执行的环境，例如：函数参数、函数的局部变量、函数执行完后返回到哪里等。
可以通过栈帧来作为程序在运行时的函数调用描述。


java开发的总体思路：
第一步首先是根据当前的目录结构将对应的.java文件编译为.class文件，；
第二部就是根据当前需要的工程类型，例如调用的jar包或者需要部署的war包来组织这些.class文件；
第三部就是根据打包类型添加一些说明，例如jar就是原样保持，war包就需要添加web.xml说明那些是调用的接口等等；
综上所述，不论怎么开发，都需要知道都是在用不同的方式组织.class文件的过程，然后添加必要的说明配置文件，常常为xml格式。
然后使用框架会将当前的这些步骤包装处理，关注与业务实现而不是整个流程的手动组织，所以使用工具的时候多想想应该是怎么组织的，执行了那些过程和步骤。
只有这样才能清楚的理解程序的组织关系和逻辑。然后才能选用合适的框架和工具。

同时在这个过程中需要注意设计模式的使用带来的架构上的变化，要从底层实现到上层组织都有全面的把握，这样才能充分理解。
加深对工程实现的理解，在实践中学习，然后在学习中强化实践能力。

Spring官方教程：
http://spring.io/guides
非常不错，概念直白而且短小精炼。

在java开发中涉及到了很多的设计模式等内容，设计模式的出现是因为实际工程的需求而来的，所以可以结合java web开发中的很多方面来加强设计模式的学习和理解。
（1）关于SOAP协议相关：
SOAP: Simple Object Access Protocal，也就是简单对象访问协议，基于XML格式文件的分布式协议，也就是说通过传输XML文件来进行通信。
协议包含四个部分：
<1>SOAP封装：封装定义了一个描述消息中的内容是什么，谁发送，谁接受，以及如何处理这些这些消息的框架；
<2>SOAP编码规则：表示应用程序需要使用的数据类型的实例；
<3>SOAP RPC表示：表示远程过程调用和应答的协议规定；
<4>SOAP绑定：使用底层协议交换信息。
SOAP的两个主要设计目标是简单性和扩展性。

SOAP=RPC+HTTP+XML 可以作为一个简单理解：采用HTTP作为底层通讯协议，RPC作为一致性的调用途径，XML作为数据传输格式。
SOAP作为一个平台和环境无关的协议，每一个通过网络的远程调用都可以通过SOAP封装起来，然后使用HTTP传输XML，虽然带来了HTTP的低效率和XML额外解析的问题，但是由于XML的开放性和HTTP的广泛性，SOAP得以广泛应用。

